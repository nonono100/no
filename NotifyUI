
local NotificationTable = {};
local Done = true;
local TweenService = game:GetService("TweenService");
local TemplateName = {}
local function Debug()
	
	return
end
--[[
local function Debug(...)
	if getgenv().DebugEnabled and game:GetService("Players").LocalPlayer then
		rconsolename("Data".."_"..tostring(game.PlaceId))
		local Args = {...}
		local Str = "";
		for _,Arg in next, Args do
			Str = Str .. " " ..tostring(Arg)
		end
		rconsolewarn(Str)
		wait(1.5)
	end
end--]]
local ObjectTable = {
	["Bore"] = {
		Text = "is constructing a Bore!";
		Image = "rbxassetid://9593304453";
		Duration = 5;
		Type = "Normal";
		SoundSpeed = 0.6;
	},
	["Priority Beacon"] = {
		Text = "is constructing a Beacon!";
		Image = "rbxassetid://2502257581";
		Duration = 7;
		Type = "Normal";
		SoundSpeed = 0.6;
	},
	["Artillery"] = {
		Text = "is constructing an Artillery!";
		Image = "https://www.roblox.com/Thumbs/Asset.ashx?width=110&height=110&assetId=645852886";
		Duration = 5;
		Type = "Normal";
		SoundSpeed = 0.6;
	},
	["S.S.I.M."] = {
		Text = "is constructing a S.S.I.M!";
		Image = "rbxassetid://2970250251";
		Duration = 7;
		Type = "Normal";
		SoundSpeed = 0.6;
	},
	["Barge"] = {
		Text  = "is constructing a Barge!";
		Image = "http://www.roblox.com/asset/?id=9617747022";
		Duration = 4.5;
		Type = "Normal";
		SoundSpeed = 0.6;
	},
	["Spatial Anchor"] = {
		Text = "is making a Spatial Anchor!";
		Image = "https://www.roblox.com/Thumbs/Asset.ashx?width=110&height=110&assetId=3536718715";
		Duration = 4.5;
		Type = "Normal";
		SoundSpeed = 0.6;
	},
	["Submersible"] = {
		Text = "is making a Sea Base!";
		Image = "https://www.roblox.com/Thumbs/Asset.ashx?width=110&height=110&assetId=635871344";
		Duration = 7;
		Type = "Normal";
		SoundSpeed = 0.6;
	},
	["Arc Turret"] = {
		Text = "You are getting close to Arc Turrets!";
		Image = "https://www.roblox.com/Thumbs/Asset.ashx?width=110&height=110&assetId=645853330";
		Duration = 7;
		Type = "Normal";
		SoundSpeed = 0.6;
	},
	["Laser Strike"] = {
		Text = "has crafted a Laser Strike!";
		Image = "";
		Duration = 7;
		Type = "Message";
		SoundSpeed = 0.8;
		Volume = 0.1;
	},
	["Rocket Launcher"] = {
		Text = "has crafted a Rocket Launcher!";
		Image = "";
		Duration = 5;
		Type = "Message";
		SoundSpeed = 0.8;
		Volume = 0.1;
	},
	["Sniper Rifle"] = {
		Text = "has crafted a Sniper!";
		Image = "";
		Duration = 5;
		Type = "Message";
		SoundSpeed = 0.8;
		Volume = 0.1;
	},
	
	["SMG"] = {
		Text = "has crafted a SMG!";
		Image = "";
		Duration = 5;
		Type = "Message";
		SoundSpeed = 0.8;
		Volume = 0.1;
	},
	["Died"] = {
		Text = "has Died...";	
		Image = "";
		Duration = 6;
		Type = "Message";
		SoundSpeed = 1;
		Volume = 0;
	},
	["600"] = {
		Text = "⌚You have played for <b>10 Minutes</b>";
		Duration = 8;
		Type = "Message";
		SoundSpeed = 0.4;
	},
	["1800"] = {
		Text = "⌚You have played for <b>30 Minutes</b>";
		Image = "";
		Duration = 8;
		Type = "Message";
		SoundSpeed = 0.4;
	},
	["3600"] = {
		Text = "⌚You have played for <b>1 Hour</b>";
		Duration = 8;
		Type = "Message";
		SoundSpeed = 0.4;
	},
	["Welcome"] = {
		Text = "Settings will load next game. Use<b> F1</b> if you want to change them later.";
		Duration = 12;
		Type = "Message";
		SoundSpeed = 0.4;
	}
};


	local Settings = {
		TitleSettings = {
			BackgroundColor3 = Color3.fromRGB(200, 200 ,200),
			TextColor3 = Color3.fromRGB(255, 255, 255),
			TextScaled = false,
			TextWrapped = true,
			TextSize = 18.000,
			Font = Enum.Font.GothamBold,
			TextXAlignment = Enum.TextXAlignment.Right,
			TextYAlignment = Enum.TextYAlignment.Center,
		},

		DescriptionSettings = {
			BackgroundColor3 = Color3.fromRGB(200, 200 ,200),
			TextColor3 = Color3.fromRGB(255, 255, 255),
			TextScaled = true,
			TextWrapped = true,
			TextSize = 14.000,
			Font = Enum.Font.Gotham,
			TextXAlignment = Enum.TextXAlignment.Left,
			TextYAlignment = Enum.TextYAlignment.Top,
		},

		IconSettings = {
			BackgroundTransparency = 1,
			BackgroundColor3 = Color3.fromRGB(255, 255, 255),	
		
		},

		GradientSettings = {
			GradientEnabled = false,
			SolidColorEnabled = true,
			SolidColor = Color3.fromRGB(255,65,65),
			Retract = true,
			Extend = false,
		},

		Main = {
		BorderColor3 = Color3.fromRGB(255, 255, 255),
			BackgroundColor3 = Color3.fromRGB(20, 20, 20),
			BackgroundTransparency = 0.15,
			Rounding = true,
			BorderSizePixel = 1
		},
}

local function RandomName(Size)
	local String = "";
	local Alphabet = {"{","}","[","]","(",")","/","\\","'","\"","`","~",",",";",":",".","<",">","@","#","$","%","1","2","3","4","5","6","7","8","9","0","a","b","c","d","e","f","g","h","i","j","k","l","m","n","o","p","q","r","s","t","u","v","w","x","y","z","A","B","C","D","E","F","G","H","I","J","K","L","M","N","O","P","Q","R","S","T","U","V","W","X","Y","Z"}

	for i = 1, Size do
		String = String .. Alphabet[math.random(#Alphabet)]
	end

	return String;
end

local NotificationFolder = Instance.new("Folder");

NotificationTable.CreateNotification = function(Player, Object, TeamColor)
    
	Debug("CREATED_",Player, Object, TeamColor)
	local Object1 = ObjectTable[Object]
	local Duration = Object1.Duration;
	local TitleSettings = Settings.TitleSettings;
	local DescriptionSettings = Settings.DescriptionSettings;
	local IconSettings = Settings.IconSettings;
	local GradientSettings;
	if Object == "Arc Turret" then
		GradientSettings = {
			GradientEnabled = false,
			SolidColorEnabled = true,
			SolidColor = Color3.fromRGB(65,255,65),
			Retract = true,
			Extend = false,
		}
	else
		GradientSettings = Settings.GradientSettings
	end
	local MainSettings = Settings.Main;
	--Urgent (100,50,50)
	Debug("Running Parent")
	if getgenv then
		Debug("GetGenv Detected")
		if (game:GetService("CoreGui"):FindFirstChild("RobloxGui"):FindFirstChild("NotificationFrame"):FindFirstChild("NotificationFolder")) then
			Debug("NotifFolder Detected")
			NotificationFolder = game:GetService("CoreGui"):FindFirstChild("RobloxGui"):FindFirstChild("NotificationFrame"):FindFirstChild("NotificationFolder");
		else
			Debug("Creating NotifFolder")
			NotificationFolder.Name = "NotificationFolder"
			NotificationFolder.Parent = game:GetService("CoreGui"):FindFirstChild("RobloxGui"):FindFirstChild("NotificationFrame");
		end
	else
		Debug("Roblox Client Detected")
		if (game:GetService("Players").LocalPlayer.PlayerGui:FindFirstChild("NotificationFolder")) then
			NotificationFolder = game:GetService("Players").LocalPlayer.PlayerGui:FindFirstChild("NotificationFolder");
		else
			NotificationFolder.Name = "NotificationFolder"
			NotificationFolder.Parent = game:GetService("Players").LocalPlayer.PlayerGui;
		end
	end

	Debug("Creating Notif Instances")
	local Notification = Instance.new("ScreenGui")
	local _Template = Instance.new("Frame")
	local Icon;
	if Object1.Type ~= "Message" then
		Icon = Instance.new("ImageLabel")
		end
	local UIAspectRatioConstraint = Instance.new("UIAspectRatioConstraint")
	local Title = Instance.new("TextLabel")
	local TextLabel = Instance.new("TextLabel")
	local UICorner = Instance.new("UICorner")
	local Frame = Instance.new("Frame")
	local UIGradient = Instance.new("UIGradient")

	Debug("Setting main Parent/Name")
	Notification.Name = RandomName(15)
	Debug("Main 1/4")
	if hookmetamethod then
		local a;a=hookmetamethod(game,"__index",function(...)local self,b=...if self==Notification and not checkcaller()then if tostring(b)=="Name"then return"CoreGui"end end;return a(...)end)
	end

	Notification.Parent = NotificationFolder
	Debug("Main 2/4")
	Notification.ZIndexBehavior = Enum.ZIndexBehavior.Sibling
	Debug("Main 3/4")
	Notification.Enabled = true;
	Debug("Main 4/4")
	local sound = Instance.new("Sound", Notification)
	sound.SoundId = "rbxassetid://2789457697"
	if Object1.Volume then
		sound.Volume = Object1.Volume 
		else
		sound.Volume = 0.4
	end
	sound.PlaybackSpeed = Object1.SoundSpeed
--[[
	if getgenv().DevBuild then
		TemplateName[_Template] = RandomName(15) .. "_";
		_Template.Name = TemplateName[_Template]
	else
		_Template.Name = "_Template";
	end--]]
	Debug("_Temp 1/9")
	_Template.BackgroundColor3 = MainSettings.BackgroundColor3
	Debug("_Temp 2/9")
	_Template.BackgroundTransparency = MainSettings.BackgroundTransparency
	Debug("_Temp 3/9")
	_Template.BorderColor3 = MainSettings.BorderColor3
	Debug("_Temp 4/9")
	if Object == "Welcome" then
	    	_Template.Position = UDim2.new(1, -325, 1, -100)
	_Template.Size = UDim2.new(0, 300, 0, 80)
	_Template.Name = "Welcome"
	    else
	_Template.Position = UDim2.new(0.713929176, 0, 0.587826073, 0)
	Debug("_Temp 5/9")
	_Template.Size = UDim2.new(0, 270, 0, 64)
	end
	Debug("_Temp 6/9")
	_Template.ZIndex = 9
	Debug("_Temp 7/9")
	_Template.Visible = false;
	Debug("_Temp 8/9")
	_Template.Parent = Notification
	Debug("_Temp 9/9")
	Debug("_Temp finished")
	if Object1.Type ~= "Message" then
	Icon.Name = "Icon"
	Icon.Parent = _Template
	Icon.BackgroundColor3 = IconSettings.BackgroundColor3
	Icon.BackgroundTransparency = IconSettings.BackgroundTransparency
	Icon.Position = UDim2.new(0.0277603213, 0, 0.182097465, 0)
	Icon.Size = UDim2.new(0, 40, 0, 40)
		Icon.Image = Object1.Image
	end
	Debug("Icon finished")
	UIAspectRatioConstraint.Parent = Icon
	Debug("UiAspect finished")
	if Object ~= "Welcome" then
	Title.Name = "Title"
	Title.Parent = _Template
	Title.BackgroundTransparency = 1.000
	Title.Position = UDim2.new(0, 63, 0, 2)
	Title.Size = UDim2.new(0, 129, 0, 21)
	Title.Text = "Notification"
	Title.TextColor3 = TitleSettings.TextColor3
	Title.TextScaled = TitleSettings.TextScaled
	Title.TextSize = TitleSettings.TextSize
	Title.TextWrapped = TitleSettings.TextWrapped
	if Object1.Type == "Message" then
		Title.TextXAlignment = Enum.TextXAlignment.Center
	else
		Title.TextXAlignment = TitleSettings.TextXAlignment
	end
	Title.TextYAlignment = TitleSettings.TextYAlignment
	Title.Font = TitleSettings.Font
	Title.BackgroundColor3 = TitleSettings.BackgroundColor3
	Title.RichText = true
	end
	Debug("Title finished")
	TextLabel.Parent = _Template
	TextLabel.BackgroundColor3 = DescriptionSettings.BackgroundColor3
	TextLabel.BackgroundTransparency = 1.000
	if Object1.Type == "Message" and not Object == "Welcome" then
		TextLabel.Position = UDim2.new(0, 10, 0, 23)
		TextLabel.Size = UDim2.new(0, 250, 0, 35)
		else
		    if Object == "Welcome" then
		  TextLabel.Position = UDim2.new(0, 8, 0, 10)
		TextLabel.Size = UDim2.new(0, 280, 0, 60)
		        else
	TextLabel.Position = UDim2.new(0, 63, 0, 23)
	TextLabel.Size = UDim2.new(0, 178, 0, 35)
		    end
end
	if Object == "Welcome" then
		TextLabel.Text = "Welcome, "..string.format(
		"<b><font color=\"rgb(%d,%d,%d)\">\%s\</font></b>",
		TeamColor[1],
		TeamColor[2],
		TeamColor[3],
		Player.. " ")..Object1.Text

	else
	TextLabel.Text = string.format(
		"<b><font color=\"rgb(%d,%d,%d)\">\%s\</font></b>",
		TeamColor[1],
		TeamColor[2],
		TeamColor[3],
		Player.. " ")..Object1.Text
end
	TextLabel.TextColor3 = DescriptionSettings.TextColor3
	TextLabel.TextScaled = DescriptionSettings.TextScaled
	TextLabel.TextSize = DescriptionSettings.TextSize
	TextLabel.TextWrapped = DescriptionSettings.TextWrapped
	TextLabel.TextXAlignment = DescriptionSettings.TextXAlignment
	if Object1.Type == "Message" then
		Title.TextYAlignment = Enum.TextYAlignment.Center
	else
		TextLabel.TextYAlignment = DescriptionSettings.TextYAlignment
		end
	TextLabel.Font = DescriptionSettings.Font
	TextLabel.BackgroundColor3 = DescriptionSettings.BackgroundColor3
	TextLabel.RichText = true
	Debug("TextLanel finished")
	if MainSettings.Rounding then
		UICorner.Parent = _Template
	end
	Debug("Rounding finished")

	Frame.Parent = _Template
	Frame.BorderSizePixel = 0
	Frame.Position = UDim2.new(0,0,1,-3)
	Frame.Size = UDim2.new(0, 263, 0, 3)
	Frame.Visible = false;
	Debug("Frame finished")
	UIGradient.Color = ColorSequence.new{ColorSequenceKeypoint.new(0.00, Color3.fromRGB(255, 8, 231)), ColorSequenceKeypoint.new(1.00, Color3.fromRGB(64, 0, 255))}
	UIGradient.Parent = Frame
	Debug("Gradient finished")

	if GradientSettings.GradientEnabled then
		Frame.Visible = true
	elseif GradientSettings.SolidColor then
			UIGradient:Destroy();
			        if Object == "Welcome" then
	Frame.BackgroundColor3 = Color3.fromRGB(0, 200, 255)
	else
			Frame.BackgroundColor3 = GradientSettings.SolidColor
			end
			Frame.Visible = true
	end
	sound:Play()
	Debug("Returning Objects")
	return {_Template, Duration, GradientSettings.Retract, GradientSettings.Extend};

end

NotificationTable.InsertNotification = function(Notification, Duration, Retracting, Extending)
	Debug("Insert Called, waiting to run")
	local ShowPosition;
	repeat game:GetService("RunService").Heartbeat:Wait() until Done;
	if Notification.Name == "Welcome" then
	    ShowPosition = UDim2.new(1, -325, 1, -100 * #NotificationFolder:GetChildren() - 1);
	else
        ShowPosition = UDim2.new(1, -280, 1, -70 * #NotificationFolder:GetChildren() - 1);
	    end
	local HidePosition = UDim2.new(1, 0, 1, 0);

	Notification.Position = HidePosition;
	Notification.Visible = true;

	local TweenInfData = TweenInfo.new(0.4);
	local TweenInfData2 = TweenInfo.new(Duration);

	TweenService:Create(Notification, TweenInfData, {
		Position = ShowPosition
	}):Play();

	if (Retracting) then

		TweenService:Create(Notification.Frame, TweenInfData2, {
			Size = UDim2.new(0, 0, 0, 3)
		}):Play();
	elseif (Extending) then
		Notification.Frame.Size = UDim2.new(0, 0, 0, 3);

		TweenService:Create(Notification.Frame, TweenInfData2, {
			Size = UDim2.new(0, 263, 0, 3)
		}):Play();
	end

	wait(TweenInfData2.Time);
	wait(TweenInfData.Time);

	Done = false
	local Tween = TweenService:Create(Notification, TweenInfData, {
		Position = HidePosition
	})

	Tween.Completed:Connect(function(State)
		if State == Enum.PlaybackState.Completed then
			Notification.Parent:Destroy();
			Done = true
		end
	end)

	Tween:Play();
end

NotificationTable.Notify = function(...)
	coroutine.wrap(function(...)
		local Args = {...};

		Debug("Notif started")
		assert(#Args < 5, "Error: Too many arguments for Notify | Expected 3 : 4");
		assert(#Args > 2, "Error: Too little arguments for Notify | Expected 3 : 4")

		Debug("Notif started", "Fixing Args")
		for Index,Argument in next, Args do
			if Index ~= 3 then --4
				Args[Index] = tostring(Argument);
			end
		end
		Debug("Settings set done")
		local NotifFrame = NotificationTable.CreateNotification(Args[1], Args[2], Args[3]);
		Debug("Finished creating", "Inserting")
		NotificationTable.InsertNotification(NotifFrame[1], NotifFrame[2], NotifFrame[3]); --, NotifFrame[4]);
		
		Debug("Finished Inserting")
	end)(...)
end

-- { Wall Notifications } --



NotificationTable.ClearOverride = function()
	for _, Folder in next, game:GetService("CoreGui"):FindFirstChild("RobloxGui"):GetChildren() do
		if Folder.Name:match("NotificationFolder") or Folder.Name:match("WallNotificationFolder") then
			Folder:Destroy();
		end
	end
	for _, Folder in next, game:GetService("Players").LocalPlayer.PlayerGui:GetChildren() do
		if Folder.Name:match("NotificationFolder") or Folder.Name:match("WallNotificationFolder") then
			Folder:Destroy();
		end
	end
end

return NotificationTable;
